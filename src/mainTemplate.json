{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/MegaByte875/azure-market/main/src/",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located, including a trailing '/'"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation. When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      }
    },
    "nebulaTags": {
      "type": "object",
      "defaultValue": {
        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9",
        "tracking": "pid-aff9ea5a-c011-4f6a-98db-70046fdbf455"
      },
      "metadata": {
        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
      }
    },
    "ngVersion": {
      "type": "string",
      "defaultValue": "2.6.2",
      "allowedValues": [
        "2.6.2",
        "3.0.0"
      ],
      "metadata": {
        "description": "NebulaGraph version to install"
      }
    },
    "ngClusterName": {
      "type": "string",
      "defaultValue": "nebula",
      "metadata": {
        "description": "The name of the NebulaGraph cluster"
      }
    },
    "ngLicenseBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The NebulaGraph ent license address"
      }
    },
    "studio": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Provision a machine with Studio on it"
      }
    },
    "vmSizeStudio": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "allowedValues": [
        "Standard_B1s",
        "Standard_B2s",
        "Standard_B1ms",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_B12ms",
        "Standard_B16ms",
        "Standard_20ms",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D48as_v4",
        "Standard_D64as_v4",
        "Standard_D2_v4",
        "Standard_D4_v4",
        "Standard_D8_v4",
        "Standard_D16_v4",
        "Standard_D32_v4",
        "Standard_D48_v4",
        "Standard_D64_v4",
        "Standard_D2s_v4",
        "Standard_D4s_v4",
        "Standard_D8s_v4",
        "Standard_D16s_v4",
        "Standard_D32s_v4",
        "Standard_D48s_v4",
        "Standard_D64s_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16"
      ],
      "metadata": {
        "description": "Size of the Studio VM"
      }
    },
    "explorer": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Provision a machine with Explorer on it"
      }
    },
    "vmSizeExplorer": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "allowedValues": [
        "Standard_B1s",
        "Standard_B2s",
        "Standard_B1ms",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_B12ms",
        "Standard_B16ms",
        "Standard_20ms",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D48as_v4",
        "Standard_D64as_v4",
        "Standard_D2_v4",
        "Standard_D4_v4",
        "Standard_D8_v4",
        "Standard_D16_v4",
        "Standard_D32_v4",
        "Standard_D48_v4",
        "Standard_D64_v4",
        "Standard_D2s_v4",
        "Standard_D4s_v4",
        "Standard_D8s_v4",
        "Standard_D16s_v4",
        "Standard_D32s_v4",
        "Standard_D48s_v4",
        "Standard_D64s_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16"
      ],
      "metadata": {
        "description": "Size of the Explorer VM"
      }
    },
    "dashboard": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Provision a machine with Dashboard on it"
      }
    },
    "vmSizeDashboard": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "allowedValues": [
        "Standard_B1s",
        "Standard_B2s",
        "Standard_B1ms",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_B12ms",
        "Standard_B16ms",
        "Standard_20ms",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D48as_v4",
        "Standard_D64as_v4",
        "Standard_D2_v4",
        "Standard_D4_v4",
        "Standard_D8_v4",
        "Standard_D16_v4",
        "Standard_D32_v4",
        "Standard_D48_v4",
        "Standard_D64_v4",
        "Standard_D2s_v4",
        "Standard_D4s_v4",
        "Standard_D8s_v4",
        "Standard_D16s_v4",
        "Standard_D32s_v4",
        "Standard_D48s_v4",
        "Standard_D64s_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16"
      ],
      "metadata": {
        "description": "Size of the Dashboard VM"
      }
    },
    "vmSizeGraphNodes": {
      "type": "string",
      "defaultValue": "Standard_D2as_v4",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D48as_v4",
        "Standard_D64as_v4",
        "Standard_D96as_v4",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_E2as_v4",
        "Standard_E4as_v4",
        "Standard_E8as_v4",
        "Standard_E16as_v4",
        "Standard_E20as_v4",
        "Standard_E32as_v4",
        "Standard_E48as_v4",
        "Standard_E64as_v4",
        "Standard_E96as_v4",
        "Standard_M8ms",
        "Standard_M16ms",
        "Standard_M32ts",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M64s",
        "Standard_M64ls",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M64",
        "Standard_M64m",
        "Standard_M128",
        "Standard_M128m"
      ],
      "metadata": {
        "description": "Size of the NebulaGraph graph nodes."
      }
    },
    "vmGraphNodeCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Number of NebulaGraph graph nodes."
      }
    },
    "vmGraphDiskSize": {
      "type": "string",
      "defaultValue": "2GiB",
      "allowedValues": [
        "2GiB",
        "4GiB",
        "8GiB"
      ],
      "metadata": {
        "description": "The disk size of each attached managed disk."
      }
    },
    "vmGraphDiskType": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Premium",
        "Standard"
      ],
      "metadata": {
        "description": "The storage account type of the attached managed disks and OS disks (Premium or Standard)."
      }
    },
    "vmSizeMetaNodes": {
      "type": "string",
      "defaultValue": "Standard_F2s_v2",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D48as_v4",
        "Standard_D64as_v4",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F48s_v2",
        "Standard_F64s_v2"
      ],
      "metadata": {
        "description": "Size of the NebulaGraph meta nodes."
      }
    },
    "vmMetaNodeCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        3
      ],
      "metadata": {
        "description": "Number of NebulaGraph meta nodes."
      }
    },
    "vmMetaDiskSize": {
      "type": "string",
      "defaultValue": "8GiB",
      "allowedValues": [
        "8GiB",
        "16GiB"
      ],
      "metadata": {
        "description": "The disk size of each attached managed disk."
      }
    },
    "vmMetaDiskType": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Premium",
        "Standard"
      ],
      "metadata": {
        "description": "The storage account type of the attached managed disks and OS disks (Premium or Standard)."
      }
    },
    "vmSizeStorageNodes": {
      "type": "string",
      "defaultValue": "Standard_F2s_v2",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D48as_v4",
        "Standard_D64as_v4",
        "Standard_D96as_v4",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2"
      ],
      "metadata": {
        "description": "Size of the NebulaGraph storage nodes."
      }
    },
    "vmStorageNodeCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Number of NebulaGraph storage nodes."
      }
    },
    "vmStorageDiskSize": {
      "type": "string",
      "defaultValue": "16GiB",
      "allowedValues": [
        "16GiB",
        "32GiB",
        "64GiB",
        "128GiB",
        "256GiB",
        "512GiB",
        "1TiB",
        "2TiB",
        "4TiB"
      ],
      "metadata": {
        "description": "The disk size of each attached managed disk, Default is 32GiB."
      }
    },
    "vmStorageDiskType": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Premium",
        "Standard"
      ],
      "metadata": {
        "description": "The storage account type of the attached managed disks and OS disks (Premium or Standard)."
      }
    },
    "vmHostNamePrefix": {
      "type": "string",
      "defaultValue": "ng",
      "maxLength": 10,
      "metadata": {
        "description": "The prefix to use for resources and hostnames when naming virtual machines in the cluster."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username used when provisioning virtual machines"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Choose a password or ssh public key for the Admin username used to access virtual machines"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Admin password"
      }
    },
    "sshPublicKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Admin ssh public key"
      }
    },
    "securityAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the built-in 'nebula' user. Should be 12 characters or more, with a minimum of 6 characters"
      }
    },
    "securityDashboardPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the built-in 'dashboard_admin' user. Should be 12 characters or more, with a minimum of 6 characters"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location where resources will be provisioned. By default, the template deploys the resources to the same location as the resource group. If specified, must be a valid Azure location e.g. 'australiasoutheast'"
      }
    },
    "vNetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose to create a new Virtual Network or use an existing one. If choosing an existing network, the subnet also needs to exist."
      }
    },
    "vNetName": {
      "type": "string",
      "defaultValue": "ngVNet",
      "metadata": {
        "description": "Virtual Network Name"
      }
    },
    "vNetExistingResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the resource group for the existing Virtual Network. Required when using an existing Virtual Network"
      }
    },
    "vNetNewAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "The address prefix size to use for a New Virtual Network. Required when creating a new Virtual Network"
      }
    },
    "vNetClusterSubnetName": {
      "type": "string",
      "defaultValue": "ng-subnet",
      "metadata": {
        "description": "Subnet name to use for NebulaGraph nodes"
      }
    },
    "vNetNewClusterSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/25",
      "metadata": {
        "description": "The address space of the subnet. Required when creating a new Virtual Network"
      }
    },
    "jumpbox": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Optionally add a virtual machine to the deployment which can be used to connect and manage virtual machines within the cluster. Not required if installing Dashboard, as Dashboard can be used as a jumpbox"
      }
    },
    "vNetAppGatewaySubnetName": {
      "type": "string",
      "defaultValue": "ng-gateway-subnet",
      "metadata": {
        "description": "Subnet name to use for the Application Gateway. Required when selecting Application Gateway for load balancing"
      }
    },
    "vNetNewAppGatewaySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.128/28",
      "metadata": {
        "description": "The address space of the Application Gateway subnet. Required when creating a new Virtual Network and selecting Application Gateway for load balancing"
      }
    },
    "appGatewayTier": {
      "type": "string",
      "defaultValue": "Standard_v2",
      "allowedValues": [
        "Standard_v2",
        "WAF_v2"
      ],
      "metadata": {
        "description": "The tier of the Application Gateway. Required when selecting Application Gateway for load balancing"
      }
    },
    "appGatewayCertBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A Base-64 encoded form of the PKCS#12 archive (.p12/.pfx) containing the key and certificate for the Application Gateway. This certificate is used to secure HTTPS connections to the Application Gateway"
      }
    },
    "appGatewayCertPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the PKCS#12 archive (.p12/.pfx) containing the key and certificate for the Application Gateway."
      }
    },
    "appGatewayWafStatus": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "The firewall status of the Application Gateway. Required when selecting Application Gateway for load balancing and using WAF tier."
      }
    },
    "appGatewayWafMode": {
      "type": "string",
      "defaultValue": "Detection",
      "allowedValues": [
        "Detection",
        "Prevention"
      ],
      "metadata": {
        "description": "The firewall mode of the Application Gateway. Required when selecting Application Gateway for load balancing and using WAF tier."
      }
    }
  },
  "variables": {
    "sharedTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('partials/shared-resources.json', parameters('_artifactsLocationSasToken')))]",
    "networkTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('networks/virtual-network-resources.json', parameters('_artifactsLocationSasToken')))]",
    "gatewayIpTemplates": {
      "No": "empty/empty-ip-resources.json",
      "Yes": "ips/ip-resources.json"
    },
    "installGateway": "[if(or(equals('Yes', parameters('studio')), equals('Yes', parameters('explorer')), equals('Yes', parameters('dashboard'))), 'Yes', 'No')]",
    "gatewayIPTemplateUrl": "[uri(parameters('_artifactsLocation'), concat(variables('gatewayIpTemplates')[variables('installGateway')], parameters('_artifactsLocationSasToken')))]",
    "gatewayOptions": "[concat(toLower(split(parameters('appGatewayTier'), '_')[0]), '-application-gateway-resources')]",
    "gatewayTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('gateways/', variables('gatewayOptions'), '.json', parameters('_artifactsLocationSasToken')))]",
    "osSettingsTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('settings/ubuntuSettings.json', parameters('_artifactsLocationSasToken')))]",
    "interfaceTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('partials/interface.json', parameters('_artifactsLocationSasToken')))]",
    "studioInterfaceTemplates": {
      "No": "empty/empty-studio-interface.json",
      "Yes": "partials/studio-interface.json"
    },
    "studioInterfaceTemplateUrl": "[uri(parameters('_artifactsLocation'), concat(variables('studioInterfaceTemplates')[parameters('studio')], parameters('_artifactsLocationSasToken')))]",
    "explorerInterfaceTemplates": {
      "No": "empty/empty-explorer-interface.json",
      "Yes": "partials/explorer-interface.json"
    },
    "explorerInterfaceTemplateUrl": "[uri(parameters('_artifactsLocation'), concat(variables('explorerInterfaceTemplates')[parameters('explorer')], parameters('_artifactsLocationSasToken')))]",
    "dashboardInterfaceTemplates": {
      "No": "empty/empty-dashboard-interface.json",
      "Yes": "partials/dashboard-interface.json"
    },
    "dashboardInterfaceTemplateUrl": "[uri(parameters('_artifactsLocation'), concat(variables('dashboardInterfaceTemplates')[parameters('dashboard')], parameters('_artifactsLocationSasToken')))]",
    "securityGroupTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('partials/securitygroup.json', parameters('_artifactsLocationSasToken')))]",
    "location": "[parameters('location')]",
    "ngSettings": {
      "clusterName": "[parameters('ngClusterName')]",
      "version": "[parameters('ngVersion')]",
      "licenseBlob": "[parameters('ngLicenseBlob')]",
      "securityAdminPwd": "[parameters('securityAdminPassword')]",
      "securityDashboardPwd": "[parameters('securityDashboardPassword')]"
    },
    "networkResourceGroupMap": {
      "new": "[resourceGroup().name]",
      "existing": "[parameters('vNetExistingResourceGroup')]"
    },
    "topologySettings": {
      "vmGraphNodeCount": "[parameters('vmGraphNodeCount')]",
      "vmSizeGraphNodes": "[parameters('vmSizeGraphNodes')]",
      "vmMetaNodeCount": "[parameters('vmMetaNodeCount')]",
      "vmSizeMetaNodes": "[parameters('vmSizeMetaNodes')]",
      "vmStorageNodeCount": "[parameters('vmStorageNodeCount')]",
      "vmSizeStorageNodes": "[parameters('vmSizeStorageNodes')]",
      "vmSizeStudio": "[parameters('vmSizeStudio')]",
      "studio": "[parameters('studio')]",
      "vmSizeExplorer": "[parameters('vmSizeExplorer')]",
      "explorer": "[parameters('explorer')]",
      "vmSizeDashboard": "[parameters('vmSizeDashboard')]",
      "dashboard": "[parameters('dashboard')]",
      "vmHostNamePrefix": "[parameters('vmHostNamePrefix')]",
      "jumpbox": "[parameters('jumpbox')]",
      "graphNodeStorageSettings": {
        "accountType": "[parameters('vmGraphDiskType')]",
        "diskSize": "[parameters('vmGraphDiskSize')]"
      },
      "metaNodeStorageSettings": {
        "accountType": "[parameters('vmMetaDiskType')]",
        "diskSize": "[parameters('vmMetaDiskSize')]"
      },
      "storageNodeStorageSettings": {
        "accountType": "[parameters('vmStorageDiskType')]",
        "diskSize": "[parameters('vmStorageDiskSize')]"
      }
    },
    "networkSettings": {
      "name": "[parameters('vNetName')]",
      "namespacePrefix": "[parameters('vmHostNamePrefix')]",
      "resourceGroup": "[variables('networkResourceGroupMap')[parameters('vNetNewOrExisting')]]",
      "location": "[variables('location')]",
      "addressPrefix": "[parameters('vNetNewAddressPrefix')]",
      "subnet": {
        "name": "[parameters('vNetClusterSubnetName')]",
        "addressPrefix": "[parameters('vNetNewClusterSubnetAddressPrefix')]"
      },
      "applicationGatewaySubnet": {
        "name": "[parameters('vNetAppGatewaySubnetName')]",
        "addressPrefix": "[parameters('vNetNewAppGatewaySubnetAddressPrefix')]"
      }
    },
    "commonVmSettings": {
      "namespacePrefix": "[parameters('vmHostNamePrefix')]",
      "graphNamespace": "[concat(parameters('vmHostNamePrefix'), '-graph-')]",
      "metaNamespace": "[concat(parameters('vmHostNamePrefix'), '-meta-')]",
      "storageNamespace": "[concat(parameters('vmHostNamePrefix'), '-storage-')]",
      "dashboardNamespace": "[concat(parameters('vmHostNamePrefix'), '-dashboard')]",
      "studioNamespace": "[concat(parameters('vmHostNamePrefix'), '-studio')]",
      "explorerNamespace": "[concat(parameters('vmHostNamePrefix'), '-explorer')]",
      "storageAccountName": "[concat('nebula', uniqueString(resourceGroup().id, deployment().name))]",
      "nebulaNSG": "[concat(parameters('vmHostNamePrefix'), '-os-NSG')]",
      "location": "[variables('location')]",
      "subnet": "[variables('networkSettings').subnet]",
      "subnetId": "[resourceId(variables('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').name, variables('networkSettings').subnet.name)]",
      "credentials": {
        "adminUsername": "[parameters('adminUsername')]",
        "password": "[parameters('adminPassword')]",
        "authenticationType": "[parameters('authenticationType')]",
        "sshPublicKey": "[parameters('sshPublicKey')]"
      }
    },
    "securityGroupSettings": {
      "nebulaNSG": "[variables('commonVmSettings').nebulaNSG]",
      "studioNSG": "[concat(variables('commonVmSettings').studioNamespace, '-nsg')]",
      "explorerNSG": "[concat(variables('commonVmSettings').explorerNamespace, '-nsg')]",
      "dashboardNSG": "[concat(variables('commonVmSettings').dashboardNamespace, '-nsg')]",
      "managementPort": 22
    },
    "applicationGatewaySettings": {
      "skuName": "[parameters('appGatewayTier')]",
      "tier": "[parameters('appGatewayTier')]",
      "minCapacity": 2,
      "maxCapacity": 10,
      "firewallStatus": "[parameters('appGatewayWafStatus')]",
      "firewallMode": "[parameters('appGatewayWafMode')]",
      "backendProtocol": "Http"
    }
  },
  "resources": [
    {
      "name": "pid-aff9ea5a-c011-4f6a-98db-70046fdbf455-partnercenter",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "name": "shared",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('sharedTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "storageAccountName": {
            "value": "[variables('commonVmSettings').storageAccountName]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('vNetNewOrExisting'), 'new')]",
      "name": "network",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "name": "nsg",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('securityGroupTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('commonVmSettings').location]"
          },
          "securityGroupSettings": {
            "value": "[variables('securityGroupSettings')]"
          },
          "topologySettings": {
            "value": "[variables('topologySettings')]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "name": "metaNICs",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]",
        "[resourceId('Microsoft.Resources/deployments', 'nsg')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('interfaceTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('commonVmSettings').location]"
          },
          "count": {
            "value": "[variables('topologySettings').vmMetaNodeCount]"
          },
          "namespace": {
            "value": "[variables('commonVmSettings').metaNamespace]"
          },
          "nebulaNSG": {
            "value": "[variables('commonVmSettings').nebulaNSG]"
          },
          "subnetId": {
            "value": "[variables('commonVmSettings').subnetId]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "name": "studioNIC",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]",
        "[resourceId('Microsoft.Resources/deployments', 'nsg')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('studioInterfaceTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('commonVmSettings').location]"
          },
          "namespace": {
            "value": "[variables('commonVmSettings').studioNamespace]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "name": "explorerNIC",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]",
        "[resourceId('Microsoft.Resources/deployments', 'nsg')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('explorerInterfaceTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('commonVmSettings').location]"
          },
          "namespace": {
            "value": "[variables('commonVmSettings').explorerNamespace]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "name": "dashboardNIC",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]",
        "[resourceId('Microsoft.Resources/deployments', 'nsg')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('dashboardInterfaceTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('commonVmSettings').location]"
          },
          "namespace": {
            "value": "[variables('commonVmSettings').dashboardNamespace]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "name": "gatewayIP",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('gatewayIPTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('commonVmSettings').location]"
          },
          "namespace": {
            "value": "[variables('commonVmSettings').namespacePrefix]"
          },
          "https": {
            "value": "No"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "name": "gateway",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'shared')]",
        "[resourceId('Microsoft.Resources/deployments', 'gatewayIP')]",
        "[resourceId('Microsoft.Resources/deployments', 'studioNIC')]",
        "[resourceId('Microsoft.Resources/deployments', 'explorerNIC')]",
        "[resourceId('Microsoft.Resources/deployments', 'dashboardNIC')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('gatewayTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "applicationGatewaySettings": {
            "value": "[variables('applicationGatewaySettings')]"
          },
          "studioAddress": {
            "value": "[reference('studioNIC').outputs.studioAddress.value]"
          },
          "explorerAddress": {
            "value": "[reference('explorerNIC').outputs.explorerAddress.value]"
          },
          "dashboardAddress": {
            "value": "[reference('dashboardNIC').outputs.dashboardAddress.value]"
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    },
    {
      "name": "virtualMachines",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'shared')]",
        "[resourceId('Microsoft.Resources/deployments', 'metaNICs')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('osSettingsTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "ngSettings": {
            "value": "[variables('ngSettings')]"
          },
          "commonVmSettings": {
            "value": "[variables('commonVmSettings')]"
          },
          "topologySettings": {
            "value": "[variables('topologySettings')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "metaAddress": {
            "value": "[replace(replace(string(reference('metaNICs').outputs.privateAddresses.value), '[', ''), ']', '')]"
          },
          "sharedStorageAccount": {
            "value": {
              "name": "[variables('commonVmSettings').storageAccountName]",
              "key": "[reference('shared').outputs.sharedStorageAccountKey.value]",
              "suffix": "[reference('shared').outputs.sharedStorageAccountSuffix.value]"
            }
          },
          "nebulaTags": {
            "value": "[parameters('nebulaTags')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "gateway": {
      "value": "[reference('gatewayIP').outputs.fqdn.value]",
      "type": "string"
    },
    "jumpboxssh": {
      "value": "[reference('virtualMachines').outputs.jumpboxssh.value]",
      "type": "string"
    }
  }
}
